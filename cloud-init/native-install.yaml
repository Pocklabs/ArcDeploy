#cloud-config

users:
  - name: arcblock
    groups: users, admin, sudo
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIReplaceWithYourActualEd25519PublicKey your-email@example.com

packages:
  - curl
  - wget
  - git
  - build-essential
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release
  - jq
  - htop
  - nano
  - vim
  - unzip
  - fail2ban
  - ufw
  - python3
  - python3-pip
  - nginx
  - sqlite3
  - redis-server

package_update: true
package_upgrade: true

write_files:
  - path: /etc/systemd/system/blocklet-server.service
    content: |
      [Unit]
      Description=Arcblock Blocklet Server
      After=network-online.target redis.service
      Wants=network-online.target
      Requires=redis.service

      [Service]
      Type=simple
      User=arcblock
      Group=arcblock
      WorkingDirectory=/opt/blocklet-server
      Environment=NODE_ENV=production
      Environment=ABT_NODE_LOG_LEVEL=info
      Environment=ABT_NODE_HOST=0.0.0.0
      Environment=ABT_NODE_PORT=8089
      Environment=ABT_NODE_DATA_DIR=/opt/blocklet-server/data
      Environment=ABT_NODE_CONFIG_DIR=/opt/blocklet-server/config
      ExecStart=/usr/local/bin/abtnode start
      Restart=always
      RestartSec=10
      StandardOutput=journal
      StandardError=journal
      SyslogIdentifier=blocklet-server
      LimitNOFILE=65536

      [Install]
      WantedBy=multi-user.target
    owner: root:root
    permissions: '0644'

  - path: /etc/nginx/sites-available/blocklet-server
    content: |
      server {
          listen 80;
          server_name _;

          location / {
              proxy_pass http://127.0.0.1:8089;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
              proxy_read_timeout 86400;
          }
      }
    owner: root:root
    permissions: '0644'

  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5
      backend = systemd

      [sshd]
      enabled = true
      port = 2222
      filter = sshd
      logpath = /var/log/auth.log
      banaction = iptables-multiport

      [nginx-http-auth]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/error.log
      maxretry = 6

      [blocklet-server]
      enabled = true
      port = 8089
      filter = blocklet-server
      logpath = /opt/blocklet-server/logs/*.log
      maxretry = 5
      bantime = 3600
    owner: root:root
    permissions: '0644'

  - path: /etc/fail2ban/filter.d/blocklet-server.conf
    content: |
      [Definition]
      failregex = ^.*\[.*\] .*Failed login attempt from <HOST>.*$
                  ^.*\[.*\] .*Unauthorized access from <HOST>.*$
                  ^.*\[.*\] .*Invalid authentication from <HOST>.*$
                  ^.*\[.*\] .*Blocked request from <HOST>.*$
      ignoreregex = ^.*\[.*\] .*Valid login from <HOST>.*$
    owner: root:root
    permissions: '0644'

  - path: /opt/blocklet-server/healthcheck.sh
    content: |
      #!/bin/bash
      set -euo pipefail

      readonly LOGFILE="/opt/blocklet-server/logs/health.log"
      readonly TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      readonly MAX_ATTEMPTS=12
      readonly SLEEP_INTERVAL=10

      log() {
          echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
      }

      mkdir -p "$(dirname "$LOGFILE")"

      wait_for_service() {
          local attempts=0
          log "INFO: Waiting for Blocklet Server to become ready..."

          while [ $attempts -lt $MAX_ATTEMPTS ]; do
              if curl -sf --max-time 10 http://localhost:8089 >/dev/null 2>&1; then
                  log "INFO: Blocklet Server is ready and responding"
                  return 0
              fi

              attempts=$((attempts + 1))
              log "INFO: Attempt $attempts/$MAX_ATTEMPTS - waiting ${SLEEP_INTERVAL}s..."
              sleep $SLEEP_INTERVAL
          done

          log "ERROR: Blocklet Server did not become ready within $((MAX_ATTEMPTS * SLEEP_INTERVAL)) seconds"
          return 1
      }

      # Check systemd service
      if systemctl is-active --quiet blocklet-server; then
          log "INFO: Blocklet Server systemd service is active"
      else
          log "ERROR: Blocklet Server systemd service is not active"
          systemctl restart blocklet-server 2>/dev/null || log "ERROR: Failed to restart service"
          exit 1
      fi

      # Check HTTP endpoint
      if wait_for_service; then
          log "INFO: Blocklet Server health check passed"
      else
          log "ERROR: Blocklet Server health check failed"
          exit 1
      fi

      # Check disk space
      readonly DISK_USAGE=$(df /opt/blocklet-server | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
      if [ "$DISK_USAGE" -gt 85 ]; then
          log "WARN: High disk usage: ${DISK_USAGE}%"
      else
          log "INFO: Disk usage: ${DISK_USAGE}%"
      fi

      # Check memory usage
      readonly MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
      if [ "$MEM_USAGE" -gt 85 ]; then
          log "WARN: High memory usage: ${MEM_USAGE}%"
      else
          log "INFO: Memory usage: ${MEM_USAGE}%"
      fi

      log "INFO: Health check completed successfully"
    owner: root:root
    permissions: "0755"

  - path: /tmp/ssh-config.txt
    content: |
      Port 2222
      Protocol 2
      PermitRootLogin no
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      KbdInteractiveAuthentication no
      PubkeyAuthentication yes
      AuthorizedKeysFile .ssh/authorized_keys
      MaxAuthTries 3
      MaxSessions 10
      X11Forwarding no
      AllowTcpForwarding no
      AllowAgentForwarding no
      PermitTunnel no
      ClientAliveInterval 300
      ClientAliveCountMax 2
      LoginGraceTime 60
      StrictModes yes
      IgnoreRhosts yes
      HostbasedAuthentication no
      PermitEmptyPasswords no
      AllowUsers arcblock
    owner: root:root
    permissions: '0644'

  - path: /tmp/limits-config.txt
    content: |
      arcblock soft nofile 65536
      arcblock hard nofile 65536
      arcblock soft nproc 32768
      arcblock hard nproc 32768
      * soft core 0
      * hard core 0
    owner: root:root
    permissions: '0644'

  - path: /tmp/sysctl-config.txt
    content: |
      net.core.rmem_max = 134217728
      net.core.wmem_max = 134217728
      net.ipv4.tcp_rmem = 4096 65536 134217728
      net.ipv4.tcp_wmem = 4096 65536 134217728
      net.core.netdev_max_backlog = 5000
      net.ipv4.ip_forward = 1
      net.ipv4.conf.all.accept_redirects = 0
      net.ipv4.conf.all.send_redirects = 0
      net.ipv4.conf.all.accept_source_route = 0
      net.ipv4.conf.all.log_martians = 1
      net.ipv4.conf.all.rp_filter = 1
      net.ipv4.conf.default.rp_filter = 1
      net.ipv4.icmp_echo_ignore_broadcasts = 1
      net.ipv4.icmp_ignore_bogus_error_responses = 1
    owner: root:root
    permissions: '0644'

runcmd:
  - mkdir -p /opt/blocklet-server/{bin,data,config,logs}
  - chown -R arcblock:arcblock /opt/blocklet-server
  - chmod 755 /opt/blocklet-server

  # Install Node.js LTS
  - curl -fsSL https://deb.nodesource.com/setup_lts.x -o /tmp/nodesource_setup.sh
  - bash /tmp/nodesource_setup.sh
  - apt-get install -y nodejs

  # Install Blocklet CLI globally
  - npm install -g @arcblock/cli

  # Configure Redis
  - systemctl enable redis-server
  - systemctl start redis-server

  # Configure Nginx
  - rm -f /etc/nginx/sites-enabled/default
  - ln -sf /etc/nginx/sites-available/blocklet-server /etc/nginx/sites-enabled/
  - nginx -t
  - systemctl enable nginx
  - systemctl start nginx

  # Initialize Blocklet Server
  - sudo -u arcblock abtnode init /opt/blocklet-server --skip-download || echo "Using alternative initialization"
  - sudo -u arcblock mkdir -p /opt/blocklet-server/{bin,data,config}

  # Setup firewall
  - ufw --force reset
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 2222/tcp comment 'SSH'
  - ufw allow 8089/tcp comment 'Blocklet Server'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw --force enable

  # Configure SSH hardening
  - cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
  - cp /tmp/ssh-config.txt /etc/ssh/sshd_config

  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban

  # Set up system limits
  - cat /tmp/limits-config.txt >> /etc/security/limits.conf

  # Configure sysctl
  - cat /tmp/sysctl-config.txt >> /etc/sysctl.conf
  - sysctl -p

  # Setup cron job for health monitoring
  - echo "*/5 * * * * /opt/blocklet-server/healthcheck.sh >/dev/null 2>&1" | sudo -u arcblock crontab -

  # Set proper ownership for healthcheck script
  - chown arcblock:arcblock /opt/blocklet-server/healthcheck.sh

  # Enable and start Blocklet Server service
  - systemctl daemon-reload
  - systemctl enable blocklet-server
  - systemctl start blocklet-server

  # Wait for service to be ready
  - sleep 30
  - |
    echo "Waiting for Blocklet Server to become ready..."
    attempts=0
    max_attempts=24
    
    while [ $attempts -lt $max_attempts ]; do
        if curl -sf --max-time 10 http://localhost:8089 >/dev/null 2>&1; then
            echo "Blocklet Server is ready and responding!"
            break
        fi
        
        attempts=$((attempts + 1))
        echo "Attempt $attempts/$max_attempts - waiting 15 seconds..."
        sleep 15
        
        if ! systemctl is-active --quiet blocklet-server; then
            echo "Service stopped unexpectedly, restarting..."
            systemctl restart blocklet-server
        fi
    done
    
    if [ $attempts -eq $max_attempts ]; then
        echo "Warning: Blocklet Server did not become ready within expected time"
        echo "Check logs with: journalctl -u blocklet-server --no-pager"
    fi

  # Final system cleanup
  - apt-get autoremove -y
  - apt-get autoclean

  # Clean up temporary files
  - rm -f /tmp/ssh-config.txt /tmp/limits-config.txt /tmp/sysctl-config.txt /tmp/nodesource_setup.sh

  # Final verification
  - systemctl is-active --quiet blocklet-server || echo "WARNING Blocklet Server service is not active"
  - systemctl is-active --quiet nginx || echo "WARNING Nginx is not active"
  - systemctl is-active --quiet redis-server || echo "WARNING Redis is not active"

  # Create initialization marker
  - touch /opt/blocklet-server/.native-install-complete
  - chown arcblock:arcblock /opt/blocklet-server/.native-install-complete

  # Restart SSH to apply new configuration
  - systemctl restart ssh

timezone: UTC
hostname: blocklet-server
package_reboot_if_required: false

final_message: |
  ArcDeploy: Blocklet Server Native Installation Complete!
  
  Access Information:
  - SSH: ssh -p 2222 arcblock@YOUR_SERVER_IP
  - Web Interface: http://YOUR_SERVER_IP:8089
  - Nginx Proxy: http://YOUR_SERVER_IP (port 80)
  - Service Status: systemctl status blocklet-server
  - Health Check: /opt/blocklet-server/healthcheck.sh
  
  Security Features:
  - SSH hardened (key-only auth, port 2222)
  - UFW firewall enabled
  - Fail2ban protection active
  - Nginx reverse proxy
  - Redis backend
  
  Monitoring:
  - Health checks: every 5 minutes
  - System logs: journalctl -u blocklet-server -f
  - Nginx logs: tail -f /var/log/nginx/access.log
  
  For support: https://github.com/Pocklabs/ArcDeploy