#cloud-config

users:
  - name: arcblock
    groups: users, admin, docker
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIReplaceWithYourActualEd25519PublicKey your-email@example.com

packages:
  - curl
  - wget
  - git
  - fail2ban
  - ufw
  - docker.io
  - docker-compose
  - python3
  - python3-pip
  - nodejs
  - npm

package_update: true
package_upgrade: true

write_files:
  - path: /home/arcblock/blocklet-server/docker-compose.yml
    content: |
      version: '3.8'
      services:
        blocklet-server:
          image: arcblock/blocklet-server:latest
          container_name: blocklet-server
          restart: unless-stopped
          ports:
            - "8089:8089"
            - "80:80"
            - "443:443"
          volumes:
            - blocklet-data:/opt/abtnode/data
            - blocklet-config:/opt/abtnode/config
            - blocklet-logs:/opt/abtnode/logs
          environment:
            - ABT_NODE_LOG_LEVEL=info
            - ABT_NODE_ENV=production
            - ABT_NODE_HOST=0.0.0.0
            - ABT_NODE_PORT=8089
            - ABT_NODE_DATA_DIR=/opt/abtnode/data
            - ABT_NODE_CONFIG_DIR=/opt/abtnode/config
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8089/api/did"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
          labels:
            - "com.docker.compose.service=blocklet-server"
      volumes:
        blocklet-data:
          driver: local
        blocklet-config:
          driver: local
        blocklet-logs:
          driver: local
    owner: arcblock:arcblock
    permissions: '0644'

  - path: /etc/systemd/system/blocklet-server.service
    content: |
      [Unit]
      Description=Arcblock Blocklet Server
      After=network-online.target docker.service
      Wants=network-online.target
      Requires=docker.service
      RequiresMountsFor=/home/arcblock
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      User=root
      Group=root
      WorkingDirectory=/home/arcblock/blocklet-server
      ExecStartPre=/usr/bin/docker-compose down --remove-orphans
      ExecStart=/usr/bin/docker-compose up -d
      ExecStop=/usr/bin/docker-compose down --timeout 30
      ExecReload=/usr/bin/docker-compose restart
      TimeoutStartSec=300
      TimeoutStopSec=120
      
      [Install]
      WantedBy=multi-user.target
    owner: root:root
    permissions: '0644'

  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5
      backend = systemd
      
      [sshd]
      enabled = true
      port = 2222
      filter = sshd
      logpath = /var/log/auth.log
      banaction = iptables-multiport
      
      [blocklet-server]
      enabled = true
      port = 8089,80,443
      filter = blocklet-server
      logpath = /home/arcblock/blocklet-server/logs/*.log
      maxretry = 5
      bantime = 3600
    owner: root:root
    permissions: '0644'

  - path: /etc/fail2ban/filter.d/blocklet-server.conf
    content: |
      [Definition]
      failregex = ^.*\[.*\] .*Failed login attempt from <HOST>.*$
                  ^.*\[.*\] .*Unauthorized access from <HOST>.*$
                  ^.*\[.*\] .*Invalid authentication from <HOST>.*$
                  ^.*\[.*\] .*Blocked request from <HOST>.*$
                  ^.*\s+<HOST>\s+.*"(GET|POST|PUT|DELETE).*" (401|403|429)
      ignoreregex = ^.*\[.*\] .*Valid login from <HOST>.*$
                    ^.*\s+<HOST>\s+.*"(GET|POST|PUT|DELETE).*" (200|201|202|204)
    owner: root:root
    permissions: '0644'

  - path: /home/arcblock/blocklet-server/healthcheck.sh
    content: |
      #!/bin/bash
      set -euo pipefail
      
      readonly LOGFILE="/home/arcblock/blocklet-server/logs/health.log"
      readonly TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      readonly MAX_ATTEMPTS=12
      readonly SLEEP_INTERVAL=10
      
      log() {
          echo "[$TIMESTAMP] $1" | tee -a "$LOGFILE"
      }
      
      mkdir -p "$(dirname "$LOGFILE")"
      
      wait_for_service() {
          local attempts=0
          log "INFO: Waiting for Blocklet Server to become ready..."
          
          while [ $attempts -lt $MAX_ATTEMPTS ]; do
              if curl -sf --max-time 5 http://localhost:8089/api/did >/dev/null 2>&1; then
                  log "INFO: Blocklet Server is ready and responding"
                  return 0
              fi
              
              attempts=$((attempts + 1))
              log "INFO: Attempt $attempts/$MAX_ATTEMPTS - waiting ${SLEEP_INTERVAL}s..."
              sleep $SLEEP_INTERVAL
          done
          
          log "ERROR: Blocklet Server did not become ready within $((MAX_ATTEMPTS * SLEEP_INTERVAL)) seconds"
          return 1
      }
      
      # Check systemd service
      if systemctl is-active --quiet blocklet-server; then
          log "INFO: Blocklet Server systemd service is active"
      else
          log "ERROR: Blocklet Server systemd service is not active"
          systemctl restart blocklet-server 2>/dev/null || log "ERROR: Failed to restart service"
          exit 1
      fi
      
      # Check container
      if docker ps --filter "name=blocklet-server" --format "{{.Status}}" | grep -q "Up"; then
          log "INFO: Blocklet Server container is running"
      else
          log "ERROR: Blocklet Server container is not running"
          exit 1
      fi
      
      # Check HTTP endpoint
      if wait_for_service; then
          log "INFO: Blocklet Server health check passed"
      else
          log "ERROR: Blocklet Server health check failed"
          exit 1
      fi
      
      # Check disk space
      readonly DISK_USAGE=$(df /home/arcblock | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
      if [ "$DISK_USAGE" -gt 85 ]; then
          log "WARN: High disk usage: ${DISK_USAGE}%"
      else
          log "INFO: Disk usage: ${DISK_USAGE}%"
      fi
      
      # Check memory usage
      readonly MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
      if [ "$MEM_USAGE" -gt 85 ]; then
          log "WARN: High memory usage: ${MEM_USAGE}%"
      else
          log "INFO: Memory usage: ${MEM_USAGE}%"
      fi
      
      log "INFO: Health check completed successfully"
    owner: arcblock:arcblock
    permissions: '0755'

runcmd:
  - mkdir -p /home/arcblock/blocklet-server/{logs,data,config}
  - chown -R arcblock:arcblock /home/arcblock
  - chmod 755 /home/arcblock/blocklet-server
  
  # Install Node.js LTS
  - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
  - apt-get install -y nodejs
  
  # Configure Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker arcblock
  
  # Install Blocklet CLI
  - sudo -u arcblock npm install -g @arcblock/cli
  
  # Pull Blocklet Server image
  - docker pull arcblock/blocklet-server:latest
  
  # Setup firewall
  - ufw --force reset
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 2222/tcp comment 'SSH'
  - ufw allow 8089/tcp comment 'Blocklet Server'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw --force enable
  
  # Configure SSH hardening
  - cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
  - |
    cat > /etc/ssh/sshd_config << 'EOF'
    # Enhanced SSH Configuration for Security
    Port 2222
    Protocol 2
    PermitRootLogin no
    PasswordAuthentication no
    ChallengeResponseAuthentication no
    KbdInteractiveAuthentication no
    PubkeyAuthentication yes
    AuthorizedKeysFile .ssh/authorized_keys
    MaxAuthTries 3
    MaxSessions 10
    X11Forwarding no
    AllowTcpForwarding no
    AllowAgentForwarding no
    PermitTunnel no
    ClientAliveInterval 300
    ClientAliveCountMax 2
    LoginGraceTime 60
    StrictModes yes
    IgnoreRhosts yes
    HostbasedAuthentication no
    PermitEmptyPasswords no
    AllowUsers arcblock
    EOF
  
  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Set up system limits
  - |
    cat >> /etc/security/limits.conf << 'EOF'
    # Limits for Blocklet Server performance
    arcblock soft nofile 65536
    arcblock hard nofile 65536
    arcblock soft nproc 32768
    arcblock hard nproc 32768
    * soft core 0
    * hard core 0
    EOF
  
  # Configure sysctl
  - |
    cat >> /etc/sysctl.conf << 'EOF'
    # Network performance tuning for Blocklet Server
    net.core.rmem_max = 134217728
    net.core.wmem_max = 134217728
    net.ipv4.tcp_rmem = 4096 65536 134217728
    net.ipv4.tcp_wmem = 4096 65536 134217728
    net.core.netdev_max_backlog = 5000
    
    # Container networking
    net.ipv4.ip_forward = 1
    
    # Security hardening
    net.ipv4.conf.all.accept_redirects = 0
    net.ipv4.conf.all.send_redirects = 0
    net.ipv4.conf.all.accept_source_route = 0
    net.ipv4.conf.all.log_martians = 1
    net.ipv4.conf.all.rp_filter = 1
    net.ipv4.conf.default.rp_filter = 1
    net.ipv4.icmp_echo_ignore_broadcasts = 1
    net.ipv4.icmp_ignore_bogus_error_responses = 1
    EOF
  - sysctl -p
  
  # Setup cron job for health monitoring
  - echo "*/5 * * * * /home/arcblock/blocklet-server/healthcheck.sh >/dev/null 2>&1" | sudo -u arcblock crontab -
  
  # Enable and start Blocklet Server service
  - systemctl daemon-reload
  - systemctl enable blocklet-server
  - systemctl start blocklet-server
  
  # Wait for service to be ready
  - |
    echo "Waiting for Blocklet Server to become ready..."
    attempts=0
    max_attempts=24
    
    while [ $attempts -lt $max_attempts ]; do
        if curl -sf --max-time 10 http://localhost:8089/api/did >/dev/null 2>&1; then
            echo "Blocklet Server is ready and responding!"
            break
        fi
        
        attempts=$((attempts + 1))
        echo "Attempt $attempts/$max_attempts - waiting 15 seconds..."
        sleep 15
        
        if ! systemctl is-active --quiet blocklet-server; then
            echo "Service stopped unexpectedly, restarting..."
            systemctl restart blocklet-server
        fi
    done
    
    if [ $attempts -eq $max_attempts ]; then
        echo "Warning: Blocklet Server did not become ready within expected time"
        echo "Check logs: journalctl -u blocklet-server --no-pager"
    fi
  
  # Final cleanup
  - apt-get autoremove -y
  - apt-get autoclean
  
  # Final verification
  - systemctl is-active --quiet blocklet-server || echo "WARNING: Blocklet Server service is not active"
  - docker ps | grep -q blocklet-server || echo "WARNING: Blocklet Server container may still be starting"
  
  # Create completion marker
  - touch /home/arcblock/blocklet-server/.setup-complete
  - chown arcblock:arcblock /home/arcblock/blocklet-server/.setup-complete
  
  # Restart SSH to apply new configuration
  - systemctl restart ssh

timezone: UTC
hostname: blocklet-server
package_reboot_if_required: false

final_message: |
  ArcDeploy: Blocklet Server setup completed with Docker!
  
  Access Information:
  - SSH: ssh -p 2222 arcblock@$INSTANCE_ID
  - Web Interface: http://$INSTANCE_ID:8089
  - Container Status: docker ps
  - Service Status: systemctl status blocklet-server
  
  For support: https://github.com/Pocklabs/blocklet-server-cloud-init