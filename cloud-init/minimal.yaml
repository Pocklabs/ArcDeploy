#cloud-config

users:
  - name: arcblock
    groups: users, admin
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIReplaceWithYourActualEd25519PublicKey your-email@example.com

packages:
  - curl
  - wget
  - git

package_update: true
package_upgrade: true

write_files:
  - path: /home/arcblock/install-blocklet.sh
    content: |
      #!/bin/bash
      set -e
      
      echo "Starting ArcDeploy Blocklet Server installation..."
      
      # Create necessary directories
      mkdir -p /home/arcblock/blocklet-server/{logs,data,config}
      chown -R arcblock:arcblock /home/arcblock
      
      # Install Node.js LTS
      curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      apt-get install -y nodejs
      
      # Install required packages
      apt-get update
      apt-get install -y podman python3-pip fail2ban ufw
      
      # Install podman-compose
      pip3 install podman-compose
      
      # Configure Podman for rootless operation
      echo 'arcblock:100000:65536' >> /etc/subuid
      echo 'arcblock:100000:65536' >> /etc/subgid
      loginctl enable-linger arcblock
      
      # Setup Podman socket
      sudo -u arcblock systemctl --user enable podman.socket
      sudo -u arcblock systemctl --user start podman.socket
      
      # Install Blocklet CLI
      sudo -u arcblock npm install -g @arcblock/cli
      
      # Pull container image
      sudo -u arcblock podman pull arcblock/blocklet-server:latest
      
      # Configure firewall
      ufw --force reset
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow 2222/tcp comment 'SSH'
      ufw allow 8089/tcp comment 'Blocklet Server'
      ufw allow 80/tcp comment 'HTTP'
      ufw allow 443/tcp comment 'HTTPS'
      ufw --force enable
      
      # Configure SSH security
      cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup
      cat > /etc/ssh/sshd_config << 'EOF'
      Port 2222
      Protocol 2
      PermitRootLogin no
      PasswordAuthentication no
      PubkeyAuthentication yes
      MaxAuthTries 3
      X11Forwarding no
      AllowTcpForwarding no
      ClientAliveInterval 300
      ClientAliveCountMax 2
      AllowUsers arcblock
      EOF
      
      # Create compose file
      cat > /home/arcblock/blocklet-server/compose.yaml << 'EOF'
      version: '3.8'
      services:
        blocklet-server:
          image: arcblock/blocklet-server:latest
          container_name: blocklet-server
          restart: unless-stopped
          ports:
            - "8089:8089"
            - "80:80"
            - "443:443"
          volumes:
            - blocklet-data:/opt/abtnode/data
            - blocklet-config:/opt/abtnode/config
          environment:
            - ABT_NODE_LOG_LEVEL=info
            - ABT_NODE_ENV=production
            - ABT_NODE_HOST=0.0.0.0
            - ABT_NODE_PORT=8089
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8089/api/did"]
            interval: 30s
            timeout: 10s
            retries: 3
      volumes:
        blocklet-data:
        blocklet-config:
      EOF
      
      # Create systemd service
      cat > /etc/systemd/system/blocklet-server.service << 'EOF'
      [Unit]
      Description=Arcblock Blocklet Server
      After=network-online.target
      Wants=network-online.target
      RequiresMountsFor=/home/arcblock
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      User=arcblock
      Group=arcblock
      WorkingDirectory=/home/arcblock/blocklet-server
      Environment=XDG_RUNTIME_DIR=/run/user/1000
      ExecStartPre=/usr/bin/podman compose down --remove-orphans
      ExecStart=/usr/bin/podman compose up -d
      ExecStop=/usr/bin/podman compose down --timeout 30
      TimeoutStartSec=300
      TimeoutStopSec=120
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      # Configure fail2ban
      systemctl enable fail2ban
      systemctl start fail2ban
      
      # Start services
      systemctl daemon-reload
      systemctl enable blocklet-server
      systemctl start blocklet-server
      
      # Wait for service to be ready
      echo "Waiting for Blocklet Server to become ready..."
      for i in {1..24}; do
        if curl -sf http://localhost:8089/api/did >/dev/null 2>&1; then
          echo "Blocklet Server is ready!"
          break
        fi
        echo "Attempt $i/24 - waiting 15 seconds..."
        sleep 15
      done
      
      # Restart SSH with new configuration
      systemctl restart ssh
      
      # Set proper ownership
      chown -R arcblock:arcblock /home/arcblock
      
      # Create completion marker
      echo "Installation completed at $(date)" > /home/arcblock/install-complete.log
      chown arcblock:arcblock /home/arcblock/install-complete.log
      
      echo "ArcDeploy Blocklet Server installation completed successfully!"
    owner: root:root
    permissions: '0755'

runcmd:
  - /home/arcblock/install-blocklet.sh
  - rm -f /home/arcblock/install-blocklet.sh

timezone: UTC
hostname: blocklet-server

final_message: |
  ArcDeploy: Blocklet Server setup completed!
  
  Access Information:
  - SSH: ssh -p 2222 arcblock@YOUR_SERVER_IP
  - Web Interface: http://YOUR_SERVER_IP:8089
  - Service Status: systemctl status blocklet-server
  - Container Status: sudo -u arcblock podman ps
  
  Security Features:
  - SSH hardened (key-only auth, port 2222)
  - UFW firewall enabled
  - Fail2ban protection active
  - Rootless Podman containers
  
  For support: https://github.com/Pocklabs/ArcDeploy