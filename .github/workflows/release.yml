name: Release ArcDeploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  TERM: xterm-256color

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate tag format
      run: |
        if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "✅ Valid semantic version tag: ${{ github.ref_name }}"
        else
          echo "❌ Invalid tag format. Expected: vX.Y.Z"
          exit 1
        fi
      if: startsWith(github.ref, 'refs/tags/')
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pyyaml yamllint
        
    - name: Validate cloud-init configuration
      run: |
        echo "🔍 Validating cloud-init.yaml..."
        python -c "
        import yaml
        import sys
        try:
            with open('cloud-init.yaml', 'r') as f:
                config = yaml.safe_load(f)
            print('✅ cloud-init.yaml is valid')
        except Exception as e:
            print(f'❌ cloud-init.yaml validation failed: {e}')
            sys.exit(1)
        "
        
    - name: Check required files
      run: |
        echo "🔍 Checking required files for release..."
        required_files=("README.md" "cloud-init.yaml" "LICENSE" ".gitignore")
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
    - name: Verify no secrets in release
      run: |
        echo "🔍 Scanning for secrets..."
        if grep -r -E "(password|secret|key|token).*=" . --exclude-dir=.git --exclude-dir=.github | grep -v "PLACEHOLDER\|placeholder\|example"; then
          echo "❌ Found potential real secrets in release"
          exit 1
        fi
        echo "✅ No secrets detected"

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        ubuntu-version: ['20.04', '22.04']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Simulate cloud-init deployment
      run: |
        echo "🧪 Testing deployment simulation on Ubuntu ${{ matrix.ubuntu-version }}..."
        
        # Basic cloud-init validation
        python3 -c "
        import yaml
        import sys
        
        with open('cloud-init.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        # Check critical sections
        required_sections = ['users', 'packages', 'runcmd']
        missing = []
        
        for section in required_sections:
            if section not in config:
                missing.append(section)
        
        if missing:
            print(f'❌ Missing required sections: {missing}')
            sys.exit(1)
        
        print('✅ All required sections present')
        print('✅ Deployment configuration validated')
        "

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release, test-deployment]
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: notes
      run: |
        echo "📝 Generating release notes..."
        
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        CURRENT_TAG="${{ github.ref_name }}"
        
        if [ -z "$LATEST_TAG" ]; then
          echo "🎉 Initial release"
          COMMIT_RANGE="HEAD"
        else
          echo "📊 Changes since $LATEST_TAG"
          COMMIT_RANGE="$LATEST_TAG..HEAD"
        fi
        
        # Generate commit summary
        echo "## 🚀 ArcDeploy $CURRENT_TAG" > release_notes.md
        echo "" >> release_notes.md
        echo "### ✨ What's New" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add commits since last tag
        git log $COMMIT_RANGE --pretty=format:"- %s" --reverse >> release_notes.md
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add deployment info
        echo "### 📦 Deployment" >> release_notes.md
        echo "" >> release_notes.md
        echo "This release includes:" >> release_notes.md
        echo "- ✅ Production-ready cloud-init configuration" >> release_notes.md
        echo "- ✅ Universal cloud provider compatibility" >> release_notes.md
        echo "- ✅ Enterprise-grade security defaults" >> release_notes.md
        echo "- ✅ 10-minute deployment process" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add compatibility info
        echo "### 🔧 Compatibility" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Supported Cloud Providers:**" >> release_notes.md
        echo "- AWS EC2" >> release_notes.md
        echo "- Google Cloud Platform" >> release_notes.md
        echo "- Microsoft Azure" >> release_notes.md
        echo "- DigitalOcean" >> release_notes.md
        echo "- Linode" >> release_notes.md
        echo "- Vultr" >> release_notes.md
        echo "- Hetzner Cloud" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Supported Operating Systems:**" >> release_notes.md
        echo "- Ubuntu 20.04 LTS" >> release_notes.md
        echo "- Ubuntu 22.04 LTS" >> release_notes.md
        echo "- Ubuntu 24.04 LTS" >> release_notes.md
        echo "- Debian 11/12" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add installation instructions
        echo "### 🚀 Quick Start" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "# 1. Download the configuration" >> release_notes.md
        echo "wget https://github.com/your-org/ArcDeploy/releases/download/$CURRENT_TAG/cloud-init.yaml" >> release_notes.md
        echo "" >> release_notes.md
        echo "# 2. Customize the configuration (add your SSH key)" >> release_notes.md
        echo "# Edit cloud-init.yaml and replace SSH_PUBLIC_KEY_PLACEHOLDER" >> release_notes.md
        echo "" >> release_notes.md
        echo "# 3. Deploy to your cloud provider" >> release_notes.md
        echo "# Use the cloud-init.yaml as user data when creating your instance" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        
        # Add security notice
        echo "### 🔒 Security" >> release_notes.md
        echo "" >> release_notes.md
        echo "- SSH authentication via keys only (passwords disabled)" >> release_notes.md
        echo "- Firewall configured with minimal open ports" >> release_notes.md
        echo "- Custom SSH port (2222) for security" >> release_notes.md
        echo "- Regular security updates enabled" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add support info
        echo "### 📞 Support" >> release_notes.md
        echo "" >> release_notes.md
        echo "- 📚 [Documentation](https://github.com/your-org/ArcDeploy/blob/main/README.md)" >> release_notes.md
        echo "- 🐛 [Report Issues](https://github.com/your-org/ArcDeploy/issues)" >> release_notes.md
        echo "- 💬 [Community Discussions](https://github.com/your-org/ArcDeploy/discussions)" >> release_notes.md
        echo "- 🔧 [Development Tools](https://github.com/your-org/ArcDeploy-Dev)" >> release_notes.md
        echo "" >> release_notes.md
        
        # Add checksums
        echo "### 🔐 Checksums" >> release_notes.md
        echo "" >> release_notes.md
        echo '```' >> release_notes.md
        echo "# SHA256 checksums for verification:" >> release_notes.md
        sha256sum cloud-init.yaml >> release_notes.md
        echo '```' >> release_notes.md
        
        # Set output for use in release
        {
          echo 'notes<<EOF'
          cat release_notes.md
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Upload release notes artifact
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-deployment, generate-release-notes]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create release archive
      run: |
        echo "📦 Creating release archive..."
        
        # Create release directory
        mkdir -p arcdeploy-${{ github.ref_name }}
        
        # Copy essential files
        cp cloud-init.yaml arcdeploy-${{ github.ref_name }}/
        cp README.md arcdeploy-${{ github.ref_name }}/
        cp LICENSE arcdeploy-${{ github.ref_name }}/
        cp -r docs arcdeploy-${{ github.ref_name }}/ 2>/dev/null || true
        
        # Create installation script
        cat > arcdeploy-${{ github.ref_name }}/install.sh << 'EOF'
        #!/bin/bash
        # ArcDeploy Installation Helper
        echo "🚀 ArcDeploy ${{ github.ref_name }} Installation Helper"
        echo ""
        echo "Before proceeding, make sure you have:"
        echo "1. A cloud provider account (AWS, GCP, Azure, etc.)"
        echo "2. Your SSH public key ready"
        echo "3. Basic understanding of cloud instance creation"
        echo ""
        echo "Steps:"
        echo "1. Edit cloud-init.yaml and replace SSH_PUBLIC_KEY_PLACEHOLDER with your SSH public key"
        echo "2. Create a new cloud instance and use cloud-init.yaml as user data"
        echo "3. Wait 10 minutes for deployment to complete"
        echo "4. Connect via SSH on port 2222"
        echo ""
        echo "For detailed instructions, see README.md"
        EOF
        chmod +x arcdeploy-${{ github.ref_name }}/install.sh
        
        # Create checksums
        cd arcdeploy-${{ github.ref_name }}
        sha256sum * > checksums.txt
        cd ..
        
        # Create archive
        tar -czf arcdeploy-${{ github.ref_name }}.tar.gz arcdeploy-${{ github.ref_name }}/
        zip -r arcdeploy-${{ github.ref_name }}.zip arcdeploy-${{ github.ref_name }}/
        
        # Generate final checksums
        sha256sum arcdeploy-${{ github.ref_name }}.tar.gz > arcdeploy-${{ github.ref_name }}.tar.gz.sha256
        sha256sum arcdeploy-${{ github.ref_name }}.zip > arcdeploy-${{ github.ref_name }}.zip.sha256
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: "ArcDeploy ${{ github.ref_name }}"
        body: ${{ needs.generate-release-notes.outputs.release-notes }}
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cloud-init.yaml
        asset_name: cloud-init.yaml
        asset_content_type: application/x-yaml
        
    - name: Upload tar.gz archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./arcdeploy-${{ github.ref_name }}.tar.gz
        asset_name: arcdeploy-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload zip archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./arcdeploy-${{ github.ref_name }}.zip
        asset_name: arcdeploy-${{ github.ref_name }}.zip
        asset_content_type: application/zip

  notify-community:
    name: Notify Community
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: Community notification
      run: |
        echo "🎉 Release ${{ github.ref_name }} has been published!"
        echo "📦 Assets available at: https://github.com/your-org/ArcDeploy/releases/tag/${{ github.ref_name }}"
        echo "📚 Documentation: https://github.com/your-org/ArcDeploy/blob/main/README.md"
        echo "💬 Discussions: https://github.com/your-org/ArcDeploy/discussions"
        
        # Here you could add integrations to:
        # - Discord/Slack notifications
        # - Twitter announcements
        # - Mailing list notifications
        # - Blog post generation
        
    - name: Update latest release badge
      run: |
        echo "📊 Latest release: ${{ github.ref_name }}"
        # This could trigger documentation updates or badge refreshes