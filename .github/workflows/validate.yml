name: Validate ArcDeploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TERM: xterm-256color

jobs:
  validate-syntax:
    name: Validate Syntax & Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install YAML tools
      run: |
        pip install pyyaml yamllint
        
    - name: Validate cloud-init YAML syntax
      run: |
        echo "🔍 Validating cloud-init.yaml syntax..."
        python -c "
        import yaml
        import sys
        try:
            with open('cloud-init.yaml', 'r') as f:
                yaml.safe_load(f)
            print('✅ cloud-init.yaml syntax is valid')
        except yaml.YAMLError as e:
            print(f'❌ YAML syntax error: {e}')
            sys.exit(1)
        except FileNotFoundError:
            print('❌ cloud-init.yaml file not found')
            sys.exit(1)
        "
        
    - name: Lint YAML files
      run: |
        echo "🔍 Linting YAML files..."
        yamllint cloud-init.yaml || true
        
    - name: Validate markdown files
      run: |
        echo "🔍 Checking markdown files..."
        find . -name "*.md" -type f | while read file; do
          echo "Checking $file"
          # Basic markdown validation
          if ! grep -q "^# " "$file"; then
            echo "⚠️  Warning: $file may be missing a main heading"
          fi
        done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for secrets
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # Check for common secret patterns
        if grep -r -E "(password|secret|key|token).*=" . --exclude-dir=.git --exclude-dir=.github || true; then
          echo "⚠️  Found potential credentials (please verify these are not real secrets)"
        fi
        
        # Check for private keys
        if grep -r "BEGIN.*PRIVATE KEY" . --exclude-dir=.git || true; then
          echo "❌ Found private key patterns"
          exit 1
        fi
        
        # Check for AWS keys
        if grep -r -E "AKIA[0-9A-Z]{16}" . --exclude-dir=.git || true; then
          echo "❌ Found potential AWS access key"
          exit 1
        fi
        
        echo "✅ No obvious secrets detected"
        
    - name: Check file permissions
      run: |
        echo "🔍 Checking file permissions..."
        find . -type f -executable -not -path "./.git/*" -not -path "./.github/*" | while read file; do
          echo "⚠️  Executable file found: $file"
        done

  validate-cloud-init:
    name: Validate Cloud-Init Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install cloud-init
      run: |
        sudo apt-get update
        sudo apt-get install -y cloud-init
        
    - name: Validate cloud-init configuration
      run: |
        echo "🔍 Validating cloud-init configuration..."
        
        # Check if cloud-init.yaml exists
        if [ ! -f "cloud-init.yaml" ]; then
          echo "❌ cloud-init.yaml file not found"
          exit 1
        fi
        
        # Validate cloud-init syntax
        if ! cloud-init schema --config-file cloud-init.yaml; then
          echo "❌ cloud-init configuration validation failed"
          exit 1
        fi
        
        echo "✅ cloud-init configuration is valid"
        
    - name: Check required cloud-init sections
      run: |
        echo "🔍 Checking required cloud-init sections..."
        
        required_sections=("users" "packages" "runcmd")
        
        for section in "${required_sections[@]}"; do
          if ! grep -q "^${section}:" cloud-init.yaml; then
            echo "⚠️  Warning: Section '$section' not found in cloud-init.yaml"
          else
            echo "✅ Section '$section' found"
          fi
        done

  test-documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README completeness
      run: |
        echo "🔍 Checking README completeness..."
        
        required_sections=(
          "# ArcDeploy"
          "## Quick Start"
          "## Requirements"
          "## Installation"
          "## Configuration"
          "## Troubleshooting"
        )
        
        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "✅ Found: $section"
          else
            echo "⚠️  Missing: $section"
          fi
        done
        
    - name: Check for broken links
      run: |
        echo "🔍 Checking for broken internal links..."
        
        # Extract markdown links
        grep -o '\[.*\](.*\.md)' README.md | sed 's/.*(\(.*\))/\1/' | while read link; do
          if [ -f "$link" ]; then
            echo "✅ Link valid: $link"
          else
            echo "❌ Broken link: $link"
          fi
        done || echo "No internal markdown links found"

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check required files
      run: |
        echo "🔍 Checking required files..."
        
        required_files=(
          "README.md"
          "cloud-init.yaml"
          "LICENSE"
          ".gitignore"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Required file exists: $file"
          else
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
    - name: Check repository size
      run: |
        echo "🔍 Checking repository size..."
        
        # Calculate total size excluding .git
        total_size=$(du -sb . --exclude=.git | cut -f1)
        size_kb=$((total_size / 1024))
        
        echo "Repository size: ${size_kb}KB"
        
        # Production repo should be under 100KB
        if [ $size_kb -gt 100 ]; then
          echo "⚠️  Warning: Repository size (${size_kb}KB) exceeds 100KB target"
        else
          echo "✅ Repository size is within target"
        fi

  compatibility-check:
    name: Compatibility Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu-version: ['20.04', '22.04']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test cloud-init compatibility on Ubuntu ${{ matrix.ubuntu-version }}
      run: |
        echo "🔍 Testing compatibility on Ubuntu ${{ matrix.ubuntu-version }}..."
        
        # Basic syntax check
        python3 -c "
        import yaml
        with open('cloud-init.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        # Check for Ubuntu compatibility
        if 'packages' in config:
            print('✅ Package installation configured')
        
        if 'users' in config:
            print('✅ User configuration found')
            
        if 'runcmd' in config:
            print('✅ Run commands configured')
            
        print('✅ Basic compatibility check passed')
        "

  generate-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [validate-syntax, security-scan, validate-cloud-init, test-documentation, validate-structure, compatibility-check]
    if: always()
    
    steps:
    - name: Generate validation summary
      run: |
        echo "# ArcDeploy Validation Report" > validation-report.md
        echo "" >> validation-report.md
        echo "## Job Results" >> validation-report.md
        echo "" >> validation-report.md
        echo "- Syntax Validation: ${{ needs.validate-syntax.result }}" >> validation-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> validation-report.md
        echo "- Cloud-Init Validation: ${{ needs.validate-cloud-init.result }}" >> validation-report.md
        echo "- Documentation Test: ${{ needs.test-documentation.result }}" >> validation-report.md
        echo "- Structure Validation: ${{ needs.validate-structure.result }}" >> validation-report.md
        echo "- Compatibility Check: ${{ needs.compatibility-check.result }}" >> validation-report.md
        echo "" >> validation-report.md
        echo "Generated on: $(date)" >> validation-report.md
        
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation-report.md
        retention-days: 30